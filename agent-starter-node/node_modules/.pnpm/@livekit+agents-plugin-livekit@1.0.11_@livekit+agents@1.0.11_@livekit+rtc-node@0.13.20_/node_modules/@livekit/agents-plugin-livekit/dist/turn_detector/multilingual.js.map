{"version":3,"sources":["../../src/turn_detector/multilingual.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { llm } from '@livekit/agents';\nimport { getJobContext, log } from '@livekit/agents';\nimport { EOUModel, EOURunnerBase } from './base.js';\nimport { MAX_HISTORY_TURNS } from './constants.js';\n\nconst REMOTE_INFERENCE_TIMEOUT = 2000;\n\nexport const INFERENCE_METHOD_MULTILINGUAL = 'lk_end_of_utterance_multilingual';\n\nexport class EUORunnerMultilingual extends EOURunnerBase {\n  constructor() {\n    super('multilingual');\n  }\n}\n\nexport class MultilingualModel extends EOUModel {\n  #logger = log();\n\n  constructor(unlikelyThreshold?: number) {\n    super({\n      modelType: 'multilingual',\n      unlikelyThreshold,\n    });\n  }\n\n  inferenceMethod(): string {\n    return INFERENCE_METHOD_MULTILINGUAL;\n  }\n\n  async unlikelyThreshold(language?: string): Promise<number | undefined> {\n    if (!language) {\n      return undefined;\n    }\n\n    let threshold = await super.unlikelyThreshold(language);\n    if (threshold === undefined) {\n      const url = remoteInferenceUrl();\n      if (!url) return undefined;\n\n      const resp = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          language,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(REMOTE_INFERENCE_TIMEOUT),\n      });\n\n      if (!resp.ok) {\n        throw new Error(`Failed to fetch threshold: ${resp.statusText}`);\n      }\n\n      const data = (await resp.json()) as { threshold: number | undefined };\n      threshold = data.threshold;\n      if (threshold) {\n        const languages = await this.languagesFuture.await;\n        languages[language] = { threshold };\n      }\n    }\n\n    return threshold;\n  }\n\n  async predictEndOfTurn(chatCtx: llm.ChatContext, timeout: number = 3): Promise<number> {\n    const url = remoteInferenceUrl();\n    if (!url) {\n      return await super.predictEndOfTurn(chatCtx, timeout);\n    }\n\n    // Copy and process chat context similar to Python implementation\n    const messages = chatCtx\n      .copy({\n        excludeFunctionCall: true,\n        excludeInstructions: true,\n        excludeEmptyMessage: true,\n      })\n      .truncate(MAX_HISTORY_TURNS);\n\n    // Get job context and build request\n    const ctx = getJobContext();\n    const request: any = {\n      ...messages.toJSON({\n        excludeImage: true,\n        excludeAudio: true,\n        excludeTimestamp: true,\n      }),\n      jobId: ctx.job.id,\n      workerId: ctx.workerId,\n    };\n\n    // Add agentId from environment variable if available\n    const agentId = process.env.LIVEKIT_AGENT_ID;\n    if (agentId) {\n      request.agentId = agentId;\n    }\n\n    const startedAt = performance.now();\n\n    this.#logger.debug({ url, request }, '=== remote EOU inference');\n\n    const resp = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(request),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      signal: AbortSignal.timeout(REMOTE_INFERENCE_TIMEOUT),\n    });\n\n    if (!resp.ok) {\n      throw new Error(`Failed to predict end of turn: ${resp.statusText}`);\n    }\n\n    const data = await resp.json();\n    const probability = data.probability;\n    if (typeof probability === 'number' && probability >= 0) {\n      this.#logger.debug(\n        {\n          eouProbability: probability,\n          duration: (performance.now() - startedAt) / 1000,\n        },\n        'eou prediction',\n      );\n      return probability;\n    }\n\n    // default to indicate no prediction\n    return 1;\n  }\n}\n\nfunction remoteInferenceUrl() {\n  const urlBase = process.env.LIVEKIT_REMOTE_EOT_URL;\n  if (!urlBase) {\n    return undefined;\n  }\n  return `${urlBase}/eot/multi`;\n}\n\nexport default EUORunnerMultilingual;\n"],"mappings":"AAIA,SAAS,eAAe,WAAW;AACnC,SAAS,UAAU,qBAAqB;AACxC,SAAS,yBAAyB;AAElC,MAAM,2BAA2B;AAE1B,MAAM,gCAAgC;AAEtC,MAAM,8BAA8B,cAAc;AAAA,EACvD,cAAc;AACZ,UAAM,cAAc;AAAA,EACtB;AACF;AAEO,MAAM,0BAA0B,SAAS;AAAA,EAC9C,UAAU,IAAI;AAAA,EAEd,YAAY,mBAA4B;AACtC,UAAM;AAAA,MACJ,WAAW;AAAA,MACX;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,kBAA0B;AACxB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,kBAAkB,UAAgD;AACtE,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,MAAM,MAAM,kBAAkB,QAAQ;AACtD,QAAI,cAAc,QAAW;AAC3B,YAAM,MAAM,mBAAmB;AAC/B,UAAI,CAAC,IAAK,QAAO;AAEjB,YAAM,OAAO,MAAM,MAAM,KAAK;AAAA,QAC5B,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,QACF,CAAC;AAAA,QACD,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,QAAQ,YAAY,QAAQ,wBAAwB;AAAA,MACtD,CAAC;AAED,UAAI,CAAC,KAAK,IAAI;AACZ,cAAM,IAAI,MAAM,8BAA8B,KAAK,UAAU,EAAE;AAAA,MACjE;AAEA,YAAM,OAAQ,MAAM,KAAK,KAAK;AAC9B,kBAAY,KAAK;AACjB,UAAI,WAAW;AACb,cAAM,YAAY,MAAM,KAAK,gBAAgB;AAC7C,kBAAU,QAAQ,IAAI,EAAE,UAAU;AAAA,MACpC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,iBAAiB,SAA0B,UAAkB,GAAoB;AACrF,UAAM,MAAM,mBAAmB;AAC/B,QAAI,CAAC,KAAK;AACR,aAAO,MAAM,MAAM,iBAAiB,SAAS,OAAO;AAAA,IACtD;AAGA,UAAM,WAAW,QACd,KAAK;AAAA,MACJ,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,IACvB,CAAC,EACA,SAAS,iBAAiB;AAG7B,UAAM,MAAM,cAAc;AAC1B,UAAM,UAAe;AAAA,MACnB,GAAG,SAAS,OAAO;AAAA,QACjB,cAAc;AAAA,QACd,cAAc;AAAA,QACd,kBAAkB;AAAA,MACpB,CAAC;AAAA,MACD,OAAO,IAAI,IAAI;AAAA,MACf,UAAU,IAAI;AAAA,IAChB;AAGA,UAAM,UAAU,QAAQ,IAAI;AAC5B,QAAI,SAAS;AACX,cAAQ,UAAU;AAAA,IACpB;AAEA,UAAM,YAAY,YAAY,IAAI;AAElC,SAAK,QAAQ,MAAM,EAAE,KAAK,QAAQ,GAAG,0BAA0B;AAE/D,UAAM,OAAO,MAAM,MAAM,KAAK;AAAA,MAC5B,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,OAAO;AAAA,MAC5B,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,QAAQ,YAAY,QAAQ,wBAAwB;AAAA,IACtD,CAAC;AAED,QAAI,CAAC,KAAK,IAAI;AACZ,YAAM,IAAI,MAAM,kCAAkC,KAAK,UAAU,EAAE;AAAA,IACrE;AAEA,UAAM,OAAO,MAAM,KAAK,KAAK;AAC7B,UAAM,cAAc,KAAK;AACzB,QAAI,OAAO,gBAAgB,YAAY,eAAe,GAAG;AACvD,WAAK,QAAQ;AAAA,QACX;AAAA,UACE,gBAAgB;AAAA,UAChB,WAAW,YAAY,IAAI,IAAI,aAAa;AAAA,QAC9C;AAAA,QACA;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAGA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,qBAAqB;AAC5B,QAAM,UAAU,QAAQ,IAAI;AAC5B,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AACA,SAAO,GAAG,OAAO;AACnB;AAEA,IAAO,uBAAQ;","names":[]}