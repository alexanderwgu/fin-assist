{"version":3,"sources":["../src/hf_utils.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { initializeLogger } from '@livekit/agents';\nimport { existsSync, rmSync, statSync } from 'fs';\nimport { homedir } from 'os';\nimport { join } from 'path';\nimport { afterAll, beforeAll, describe, expect, it } from 'vitest';\nimport { downloadFileToCacheDir } from './hf_utils.js';\n\nfunction getCachePath(repo: string, cacheDir?: string): string {\n  const baseCacheDir = cacheDir || join(homedir(), '.cache', 'huggingface', 'hub');\n  return join(baseCacheDir, `models--${repo.replace(/\\//g, '--')}`);\n}\n\nfunction clearCache(repo: string, cacheDir?: string): void {\n  const repoPath = getCachePath(repo, cacheDir);\n  if (existsSync(repoPath)) {\n    rmSync(repoPath, { recursive: true, force: true });\n  }\n}\n\ndescribe('HuggingFace Download Fixed Implementation', () => {\n  initializeLogger({ pretty: true, level: 'debug' });\n\n  const TEST_REPO = 'livekit/turn-detector';\n  const TEST_CACHE_DIR = join(process.cwd(), '.test-cache');\n\n  beforeAll(() => {\n    // Clear test cache before all tests\n    clearCache(TEST_REPO, TEST_CACHE_DIR);\n  });\n\n  afterAll(() => {\n    // Clean up test cache after all tests\n    if (existsSync(TEST_CACHE_DIR)) {\n      rmSync(TEST_CACHE_DIR, { recursive: true, force: true });\n    }\n  });\n\n  describe('Basic Downloads', () => {\n    it('should download a standard file in subdirectory', async () => {\n      const result = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      expect(result).toBeTruthy();\n      expect(existsSync(result)).toBe(true);\n\n      const stats = statSync(result);\n      const sizeMB = stats.size / 1024 / 1024;\n      expect(sizeMB).toBeCloseTo(62.67, 1); // ~62.67 MB\n    });\n\n    it('should download a large file with retry logic', async () => {\n      const result = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      expect(result).toBeTruthy();\n      expect(existsSync(result)).toBe(true);\n\n      const stats = statSync(result);\n      const sizeMB = stats.size / 1024 / 1024;\n      expect(sizeMB).toBeCloseTo(249.96, 1); // ~250 MB\n    });\n\n    it('should download a very small file', async () => {\n      const result = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'languages.json',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      expect(result).toBeTruthy();\n      expect(existsSync(result)).toBe(true);\n\n      const stats = statSync(result);\n      expect(stats.size).toBeLessThan(200); // Very small file (102 bytes)\n    });\n\n    it('should download from different revision', async () => {\n      const result = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'tokenizer.json',\n        revision: 'v0.2.0-intl',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      expect(result).toBeTruthy();\n      expect(existsSync(result)).toBe(true);\n\n      const stats = statSync(result);\n      const sizeMB = stats.size / 1024 / 1024;\n      expect(sizeMB).toBeGreaterThan(3); // Should be around 3.36 MB or more\n    });\n  });\n\n  describe('Cache Behavior', () => {\n    it('should use cache on second download', async () => {\n      // First download\n      const firstPath = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      // Second download (should be from cache)\n      const startTime = Date.now();\n      const secondPath = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n      const cacheTime = Date.now() - startTime;\n\n      expect(secondPath).toBe(firstPath);\n      expect(cacheTime).toBeLessThan(500); // Should be very fast if from cache\n    });\n\n    it('should respect localFileOnly flag when file is cached', async () => {\n      // Ensure file is cached first\n      await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'tokenizer.json',\n        revision: 'v0.2.0-intl',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      // Now try with localFileOnly\n      const cachedPath = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'tokenizer.json',\n        revision: 'v0.2.0-intl',\n        cacheDir: TEST_CACHE_DIR,\n        localFileOnly: true,\n      });\n\n      expect(cachedPath).toBeTruthy();\n      expect(existsSync(cachedPath)).toBe(true);\n    });\n\n    it('should throw error with localFileOnly when file is not cached', async () => {\n      await expect(\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'non-existent-file.txt',\n          revision: 'main',\n          cacheDir: TEST_CACHE_DIR,\n          localFileOnly: true,\n        }),\n      ).rejects.toThrow(/File not found in cache/);\n    });\n\n    it('should save revision-to-commit mappings', async () => {\n      await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'languages.json',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      // Check if refs file was created\n      const refsPath = join(getCachePath(TEST_REPO, TEST_CACHE_DIR), 'refs', 'v1.2.2-en');\n      expect(existsSync(refsPath)).toBe(true);\n    });\n\n    it('should handle multiple files from same revision without overwriting refs', async () => {\n      // Download two different files from the same revision\n      const file1Path = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      const file2Path = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'languages.json',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      // Both files should exist\n      expect(existsSync(file1Path)).toBe(true);\n      expect(existsSync(file2Path)).toBe(true);\n\n      // Now test that both files can be retrieved with localFileOnly\n      const cachedFile1 = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n        localFileOnly: true,\n      });\n\n      const cachedFile2 = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'languages.json',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n        localFileOnly: true,\n      });\n\n      // Both should be found in cache\n      expect(cachedFile1).toBe(file1Path);\n      expect(cachedFile2).toBe(file2Path);\n\n      // Check that both files are in the same snapshot folder (same commit hash)\n      // Extract commit hash from paths\n      const match1 = file1Path.match(/snapshots\\/([a-f0-9]{40})\\//);\n      const match2 = file2Path.match(/snapshots\\/([a-f0-9]{40})\\//);\n\n      expect(match1).toBeTruthy();\n      expect(match2).toBeTruthy();\n\n      const commitHash1 = match1![1];\n      const commitHash2 = match2![1];\n\n      // FIXED: All files from the same revision should use the same HEAD commit\n      expect(commitHash1).toBe(commitHash2);\n\n      // Check that the refs file contains the single HEAD commit\n      const { readFileSync } = await import('fs');\n      const refsPath = join(getCachePath(TEST_REPO, TEST_CACHE_DIR), 'refs', 'v1.2.2-en');\n      const refsContent = readFileSync(refsPath, 'utf-8').trim();\n\n      // The refs file should contain just the commit hash, not a JSON mapping\n      expect(refsContent).toMatch(/^[a-f0-9]{40}$/);\n      expect(refsContent).toBe(commitHash1);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid repository gracefully', async () => {\n      await expect(\n        downloadFileToCacheDir({\n          repo: 'non-existent-org/non-existent-repo',\n          path: 'file.txt',\n          revision: 'main',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n      ).rejects.toThrow();\n    });\n\n    it('should handle invalid file path gracefully', async () => {\n      await expect(\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'non-existent-file-path.xyz',\n          revision: 'v1.2.2-en',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n      ).rejects.toThrow();\n    });\n\n    it('should handle invalid revision gracefully', async () => {\n      await expect(\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'tokenizer.json',\n          revision: 'non-existent-revision',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Cache Structure', () => {\n    it('should create proper cache directory structure', async () => {\n      await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      const cachePath = getCachePath(TEST_REPO, TEST_CACHE_DIR);\n\n      // Check expected directories exist\n      expect(existsSync(join(cachePath, 'blobs'))).toBe(true);\n      expect(existsSync(join(cachePath, 'snapshots'))).toBe(true);\n      expect(existsSync(join(cachePath, 'refs'))).toBe(true);\n    });\n\n    it('should handle commit hash revisions', async () => {\n      // We'll use the actual commit hash from the v1.2.2-en tag\n      // First, download to ensure we have the commit hash mapping\n      const tagResult = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      // Extract the commit hash from the path\n      const match = tagResult.match(/snapshots\\/([a-f0-9]{40})\\//);\n      expect(match).toBeTruthy();\n      const commitHash = match![1];\n\n      // Now download with commit hash directly\n      const result = await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'onnx/model_q8.onnx',\n        revision: commitHash,\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      expect(result).toBeTruthy();\n      expect(result).toContain(commitHash);\n    });\n\n    it('should store files as content-addressed blobs', async () => {\n      await downloadFileToCacheDir({\n        repo: TEST_REPO,\n        path: 'languages.json',\n        revision: 'v1.2.2-en',\n        cacheDir: TEST_CACHE_DIR,\n      });\n\n      const blobsPath = join(getCachePath(TEST_REPO, TEST_CACHE_DIR), 'blobs');\n      const { readdirSync } = await import('fs');\n      const blobs = readdirSync(blobsPath);\n\n      // Should have at least one blob with SHA256 hash name\n      expect(blobs.length).toBeGreaterThan(0);\n      expect(blobs[0]).toMatch(/^[a-f0-9]{64}$/);\n    });\n  });\n\n  describe('Performance', () => {\n    it('should download files in parallel efficiently', async () => {\n      const startTime = Date.now();\n\n      // Download multiple files in parallel\n      const promises = [\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'onnx/model_q8.onnx',\n          revision: 'v1.2.2-en',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'languages.json',\n          revision: 'v1.2.2-en',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'tokenizer.json',\n          revision: 'v0.2.0-intl',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n      ];\n\n      const results = await Promise.all(promises);\n      const totalTime = Date.now() - startTime;\n\n      // All should succeed\n      results.forEach((result) => {\n        expect(result).toBeTruthy();\n        expect(existsSync(result)).toBe(true);\n      });\n\n      // Should be faster than downloading sequentially\n      console.log(`Parallel download took ${totalTime}ms`);\n    });\n  });\n\n  describe('Failures', () => {\n    it('should handle non-existent file', async () => {\n      await expect(\n        downloadFileToCacheDir({\n          repo: TEST_REPO,\n          path: 'onnx/model_non_existent.onnx',\n          revision: 'v1.2.2-en',\n          cacheDir: TEST_CACHE_DIR,\n        }),\n      ).rejects.toThrow('cannot get path info for onnx/model_non_existent.onnx');\n    });\n  });\n});\n"],"mappings":"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","names":[]}