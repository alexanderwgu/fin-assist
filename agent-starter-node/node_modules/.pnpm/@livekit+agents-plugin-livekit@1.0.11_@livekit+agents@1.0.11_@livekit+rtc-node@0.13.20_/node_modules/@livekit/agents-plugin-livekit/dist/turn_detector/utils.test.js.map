{"version":3,"sources":["../../src/turn_detector/utils.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, it } from 'vitest';\nimport { getUnicodeCategory, normalizeText } from './utils.js';\n\ndescribe('getUnicodeCategory', () => {\n  it('should identify basic ASCII punctuation', () => {\n    expect(getUnicodeCategory('!')).toBe('P');\n    expect(getUnicodeCategory('\"')).toBe('P');\n    expect(getUnicodeCategory('#')).toBe('P');\n    expect(getUnicodeCategory('$')).toBe('P');\n    expect(getUnicodeCategory('%')).toBe('P');\n    expect(getUnicodeCategory('&')).toBe('P');\n    expect(getUnicodeCategory(\"'\")).toBe('P');\n    expect(getUnicodeCategory('(')).toBe('P');\n    expect(getUnicodeCategory(')')).toBe('P');\n    expect(getUnicodeCategory('*')).toBe('P');\n    expect(getUnicodeCategory('+')).toBe('P');\n    expect(getUnicodeCategory(',')).toBe('P');\n    expect(getUnicodeCategory('-')).toBe('P');\n    expect(getUnicodeCategory('.')).toBe('P');\n    expect(getUnicodeCategory('/')).toBe('P');\n  });\n\n  it('should identify colon/semicolon punctuation', () => {\n    expect(getUnicodeCategory(':')).toBe('P');\n    expect(getUnicodeCategory(';')).toBe('P');\n    expect(getUnicodeCategory('<')).toBe('P');\n    expect(getUnicodeCategory('=')).toBe('P');\n    expect(getUnicodeCategory('>')).toBe('P');\n    expect(getUnicodeCategory('?')).toBe('P');\n    expect(getUnicodeCategory('@')).toBe('P');\n  });\n\n  it('should identify bracket punctuation', () => {\n    expect(getUnicodeCategory('[')).toBe('P');\n    expect(getUnicodeCategory('\\\\')).toBe('P');\n    expect(getUnicodeCategory(']')).toBe('P');\n    expect(getUnicodeCategory('^')).toBe('P');\n    expect(getUnicodeCategory('_')).toBe('P');\n    expect(getUnicodeCategory('`')).toBe('P');\n  });\n\n  it('should identify brace punctuation', () => {\n    expect(getUnicodeCategory('{')).toBe('P');\n    expect(getUnicodeCategory('|')).toBe('P');\n    expect(getUnicodeCategory('}')).toBe('P');\n    expect(getUnicodeCategory('~')).toBe('P');\n  });\n\n  it('should identify extended punctuation', () => {\n    expect(getUnicodeCategory('¡')).toBe('P');\n    expect(getUnicodeCategory('¿')).toBe('P');\n    expect(getUnicodeCategory('«')).toBe('P');\n    expect(getUnicodeCategory('»')).toBe('P');\n  });\n\n  it('should not identify letters as punctuation', () => {\n    expect(getUnicodeCategory('a')).toBe('');\n    expect(getUnicodeCategory('A')).toBe('');\n    expect(getUnicodeCategory('z')).toBe('');\n    expect(getUnicodeCategory('Z')).toBe('');\n  });\n\n  it('should not identify numbers as punctuation', () => {\n    expect(getUnicodeCategory('0')).toBe('');\n    expect(getUnicodeCategory('1')).toBe('');\n    expect(getUnicodeCategory('9')).toBe('');\n  });\n\n  it('should not identify whitespace as punctuation', () => {\n    expect(getUnicodeCategory(' ')).toBe('');\n    expect(getUnicodeCategory('\\t')).toBe('');\n    expect(getUnicodeCategory('\\n')).toBe('');\n  });\n\n  it('should handle empty string', () => {\n    expect(getUnicodeCategory('')).toBe('');\n  });\n\n  it('should handle unicode characters', () => {\n    expect(getUnicodeCategory('é')).toBe('');\n    expect(getUnicodeCategory('ñ')).toBe('');\n    expect(getUnicodeCategory('ç')).toBe('');\n  });\n});\n\ndescribe('normalizeText', () => {\n  describe('basic functionality', () => {\n    it('should convert to lowercase', () => {\n      expect(normalizeText('HELLO')).toBe('hello');\n      expect(normalizeText('HeLLo')).toBe('hello');\n      expect(normalizeText('WORLD')).toBe('world');\n    });\n\n    it('should remove basic punctuation', () => {\n      expect(normalizeText('Hello!')).toBe('hello');\n      expect(normalizeText('Hello?')).toBe('hello');\n      expect(normalizeText('Hello.')).toBe('hello');\n      expect(normalizeText('Hello,')).toBe('hello');\n    });\n\n    it('should preserve apostrophes', () => {\n      expect(normalizeText(\"I'm happy\")).toBe(\"i'm happy\");\n      expect(normalizeText(\"don't worry\")).toBe(\"don't worry\");\n      expect(normalizeText(\"it's great\")).toBe(\"it's great\");\n    });\n\n    it('should preserve hyphens', () => {\n      expect(normalizeText('well-trained')).toBe('well-trained');\n      expect(normalizeText('state-of-the-art')).toBe('state-of-the-art');\n      expect(normalizeText('co-worker')).toBe('co-worker');\n    });\n\n    it('should collapse multiple whitespace', () => {\n      expect(normalizeText('hello    world')).toBe('hello world');\n      expect(normalizeText('multiple   spaces   here')).toBe('multiple spaces here');\n      expect(normalizeText('tab\\t\\tspaces')).toBe('tab spaces');\n      expect(normalizeText('newline\\n\\nspaces')).toBe('newline spaces');\n    });\n\n    it('should trim leading and trailing whitespace', () => {\n      expect(normalizeText('  hello  ')).toBe('hello');\n      expect(normalizeText('\\t\\nhello\\t\\n')).toBe('hello');\n      expect(normalizeText('   hello world   ')).toBe('hello world');\n    });\n  });\n\n  describe('comprehensive test cases', () => {\n    it('should handle the basic greeting case', () => {\n      expect(normalizeText('Hi, how can I help you today?')).toBe('hi how can i help you today');\n    });\n\n    it('should handle contractions and hyphens', () => {\n      expect(normalizeText(\"I'm a well-trained assistant!\")).toBe(\"i'm a well-trained assistant\");\n    });\n\n    it('should remove various punctuation types', () => {\n      expect(normalizeText('Hello!!! What??? Price: $19.99 (20% off).')).toBe(\n        'hello what price 1999 20 off',\n      );\n    });\n\n    it('should handle multiple spaces', () => {\n      expect(normalizeText('Multiple    spaces   here')).toBe('multiple spaces here');\n    });\n\n    it('should handle unicode characters', () => {\n      expect(normalizeText('Café entrées naïve résumé')).toBe('café entrées naïve résumé');\n    });\n\n    it('should handle mixed punctuation and unicode', () => {\n      expect(normalizeText('¿Cómo estás? ¡Muy bien!')).toBe('cómo estás muy bien');\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle empty string', () => {\n      expect(normalizeText('')).toBe('');\n    });\n\n    it('should handle whitespace-only string', () => {\n      expect(normalizeText('   ')).toBe('');\n      expect(normalizeText('\\t\\n  ')).toBe('');\n    });\n\n    it('should handle punctuation-only string', () => {\n      expect(normalizeText('!!!')).toBe('');\n      expect(normalizeText('???')).toBe('');\n      expect(normalizeText('...')).toBe('');\n    });\n\n    it('should handle mixed punctuation and preserved characters', () => {\n      expect(normalizeText('!@#$%^&*()_+-={}[]|\\\\:;\"\\'<>?,./')).toBe(\"-'\");\n    });\n\n    it('should handle numbers with punctuation', () => {\n      expect(normalizeText('$19.99')).toBe('1999');\n      expect(normalizeText('(555) 123-4567')).toBe('555 123-4567');\n    });\n\n    it('should handle special unicode punctuation', () => {\n      expect(normalizeText('Hello… world!')).toBe('hello world');\n      expect(normalizeText('\"Quoted text\"')).toBe('quoted text');\n      expect(normalizeText(\"'Single quotes'\")).toBe(\"'single quotes'\");\n    });\n  });\n\n  describe('unicode normalization', () => {\n    it('should apply NFKC normalization', () => {\n      expect(normalizeText('café')).toBe('café');\n      expect(normalizeText('naïve')).toBe('naïve');\n    });\n\n    it('should handle combining characters', () => {\n      const eWithCombiningAcute = 'caf\\u0065\\u0301';\n      const precomposedE = 'café';\n      expect(normalizeText(eWithCombiningAcute)).toBe(normalizeText(precomposedE));\n    });\n  });\n\n  describe('real-world examples', () => {\n    it('should handle typical assistant responses', () => {\n      expect(normalizeText('Hello! How can I assist you today?')).toBe(\n        'hello how can i assist you today',\n      );\n      expect(normalizeText(\"I'm here to help with any questions you might have.\")).toBe(\n        \"i'm here to help with any questions you might have\",\n      );\n    });\n\n    it('should handle typical user queries', () => {\n      expect(normalizeText(\"What's the weather like?\")).toBe(\"what's the weather like\");\n      expect(normalizeText('Can you help me with my order?')).toBe('can you help me with my order');\n      expect(normalizeText('I need assistance, please!')).toBe('i need assistance please');\n    });\n\n    it('should handle incomplete sentences', () => {\n      expect(normalizeText('What is the weather in')).toBe('what is the weather in');\n      expect(normalizeText('I am looking for')).toBe('i am looking for');\n      expect(normalizeText('Could you please')).toBe('could you please');\n    });\n\n    it('should handle multilingual text', () => {\n      expect(normalizeText('Bonjour! Comment ça va?')).toBe('bonjour comment ça va');\n      expect(normalizeText('¡Hola! ¿Cómo estás?')).toBe('hola cómo estás');\n      expect(normalizeText('Guten Tag! Wie geht es Ihnen?')).toBe('guten tag wie geht es ihnen');\n    });\n  });\n});\n"],"mappings":"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","names":[]}